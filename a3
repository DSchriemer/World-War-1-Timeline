# YOUR CODE GOES HERE
import random

#There are 24 squares a player can land on, including the start square
#to simulate this I'll create a circularly linked list that the player traverses, each node is a square

class Node:
    def __init__(self, dataval=None):
        self.dataval = dataval
        self.nextval = None

class SLinkedList:
    def __init__(self):
        self.headval = None

    def listprint(self):
        printval = self.headval
        while printval is not None:
            print (printval.dataval)
            printval = printval.nextval

def turn(position):
    movement = roll_dice()
    print(movement)
    for i in range(0,movement[0]):
        position = position.nextval

    if movement[1]:
        movement = roll_dice()
        print(movement)
        for i in range(0,movement[0]):
            position = position.nextval

    if movement[1]:
        movement = roll_dice()
        print(movement)
        for i in range(0,movement[0]):
            position = position.nextval

    if movement[1]:
        #Player would go mo jail, will simulate this in the next question
        print("go to jail")

    return position #final position at end of turn

def roll_dice():
    print("Rolling dice...")
    dice1 = random.randint(1,6) #randomly select a value between 1 and 6
    dice2 = random.randint(1,6)
    doubles = False

    total = dice1 + dice2

    print(dice1)
    print(dice2)

    #if the dice have the same value, reroll but keep track of the total
    if dice1 == dice2:
        doubles = True

    return total, doubles;

board = SLinkedList()
board.headval = Node("Go")
e2 = Node("Mediteranian")
e3 = Node("ComChest")
e4 = Node("Baltic")
e5 = Node("IncomeTax")
e6 = Node("ReadingRailroad")
e7 = Node("Oriental")
e8 = Node("Chance")
e9 = Node("Vermont")
e10 = Node("Conneticut")
e11 = Node("Jail")
e12 = Node("StCharles")
e13 = Node("Electric")
e14 = Node("States")
e15 = Node("Virginia")
e16 = Node("PenRailroad")
e17 = Node("StJames")
e18 = Node("ComChest")
e19 = Node("Tennesse")
e20 = Node("NewYork")
e21 = Node("FreeParking")
e22 = Node("Kentucky")
e23 = Node("Chance")
e24 = Node("Indiana")
e25 = Node("Illinois")
e26 = Node("B&ORailroad")
e27 = Node("Atlantic")
e28 = Node("Ventor")
e29 = Node("WaterWorks")
e30 = Node("Marvin")
e31 = Node("GoToJail")
e32 = Node("Pacific")
e33 = Node("NCarolina")
e34 = Node("ComChest")
e35 = Node("Pensilvania")
e36 = Node("ShortLineRailroad")
e37 = Node("ParkPlace")
e38 = Node("LuxTax")
e39 = Node("Boardwalk")


# Link the Nodes together
board.headval.nextval = e2
e2.nextval = e3
e3.nextval = e4
e4.nextval = e5
e5.nextval = e6
e6.nextval = e7
e7.nextval = e8
e8.nextval = e9
e9.nextval = e10
e10.nextval = e11
e11.nextval = e12
e12.nextval = e13
e13.nextval = e14
e14.nextval = e15
e15.nextval = e16
e16.nextval = e17
e17.nextval = e18
e18.nextval = e19
e19.nextval = e20
e20.nextval = e21
e21.nextval = e22
e22.nextval = e23
e23.nextval = e24
e24.nextval = e25
e25.nextval = e26
e26.nextval = e27
e27.nextval = e28
e28.nextval = e29
e29.nextval = e30
e30.nextval = e31
e31.nextval = e32
e32.nextval = e34
e34.nextval = e35
e35.nextval = e36
e36.nextval = e37
e37.nextval = e38
e38.nextval = e39
e39.nextval = board.headval

position = board.headval

position = turn(position)

print(position.dataval)

position = turn(position)

print(position.dataval)

chanceCards = ["OutJail", "CollectMoney", "CollectMoney", "CollectMoney", "Advance", "Advance"
, "Advance", "Advance", "Advance", "Advance", "Advance", "Advance"
, "PayMoney", "PayMoney", "PayMoney", "GoToJail"]

#randomly select one of the 16 cards
selection = random.randint(0,15)

#print selection
print(chanceCards[selection])








# YOUR CODE GOES HERE
import random

#There are 24 squares a player can land on, including the start square
#to simulate this I'll create a circularly linked list that the player traverses, each node is a square

chanceCards = ["OutJail", "CollectMoney", "CollectMoney", "CollectMoney", "Railroad", "Utility"
, "Go", "StCharles", "Illinois", "Boardwalk", "ReadingRailroad", "ThreeBack"
, "PayMoney", "PayMoney", "PayMoney", "GoToJail"]


class Node:
    def __init__(self, dataval=None):
        self.dataval = dataval
        self.nextval = None
        self.type = None

class SLinkedList:
    def __init__(self):
        self.headval = None

    def listprint(self):
        printval = self.headval
        while printval is not None:
            print (printval.dataval)
            printval = printval.nextval

def chanceCard(position):

    #randomly select one of the 16 cards
    selection = random.randint(0,15)

    #print selection
    card = chanceCards[selection]
    print(card)

    if card is "Railroad":
        while position.type is not "Railroad":
            position = position.nextval

    else if card is "Utility":
        while position.type is not "Utility":
            position = position.nextval

    else if card is "Go":
        position = goTo(position,"Go")

    else if card is "StCharles":
        position = goTo(position,"StCharles")

    else if card is "Illinois":
        position = goTo(position,"Illinois")

    else if card is "Boardwalk":
        position = goTo(position,"Boardwalk")

    else if card is "ReadingRailroad":
        position = goTo(position,"ReadingRailroad")

    else if card is "GoToJail":
        position = goTo(position,"Jail")

    else if card is "ThreeBack":
        for i in range(0,37):
            position = position.next

    return position



def goTo(position, location):
    while position.dataval is not location:
        position = position.nextval

    return position

def turn(position):
    movement = roll_dice()
    print(movement)
    for i in range(0,movement[0]):
        position = position.nextval

    if position.dataval = "Chance":
        position = chanceCard(position)


    if movement[1]:
        movement = roll_dice()
        print(movement)
        for i in range(0,movement[0]):
            position = position.nextval

    if movement[1]:
        movement = roll_dice()
        print(movement)
        for i in range(0,movement[0]):
            position = position.nextval

    if movement[1]:
        #Player would go mo jail, will simulate this in the next question
        print("go to jail")

    return position #final position at end of turn

def roll_dice():
    print("Rolling dice...")
    dice1 = random.randint(1,6) #randomly select a value between 1 and 6
    dice2 = random.randint(1,6)
    doubles = False

    total = dice1 + dice2

    print(dice1)
    print(dice2)

    #if the dice have the same value, reroll but keep track of the total
    if dice1 == dice2:
        doubles = True

    return total, doubles;

board = SLinkedList()
board.headval = Node("Go")
e2 = Node("Mediteranian")
e3 = Node("ComChest")
e4 = Node("Baltic")
e5 = Node("IncomeTax")
e6 = Node("ReadingRailroad")
e6.type = "Railroad"
e7 = Node("Oriental")
e8 = Node("Chance")
e8.type = "Chance"
e9 = Node("Vermont")
e10 = Node("Conneticut")
e11 = Node("Jail")
e12 = Node("StCharles")
e13 = Node("Electric")
e13.type = "Utility"
e14 = Node("States")
e15 = Node("Virginia")
e16 = Node("PenRailroad")
e16.type = "Railroad"
e17 = Node("StJames")
e18 = Node("ComChest")
e19 = Node("Tennesse")
e20 = Node("NewYork")
e21 = Node("FreeParking")
e22 = Node("Kentucky")
e23 = Node("Chance")
e23.type = "Chance"
e24 = Node("Indiana")
e25 = Node("Illinois")
e26 = Node("B&ORailroad")
e26.type = "Railroad"
e27 = Node("Atlantic")
e28 = Node("Ventor")
e29 = Node("WaterWorks")
e29.type = "Utility"
e30 = Node("Marvin")
e31 = Node("GoToJail")
e32 = Node("Pacific")
e33 = Node("NCarolina")
e34 = Node("ComChest")
e35 = Node("Pensilvania")
e36 = Node("ShortLineRailroad")
e36.type = "Railroad"
e37 = Node("Chance")
e37.type = "Chance"
e38 = Node("ParkPlace")
e39 = Node("LuxTax")
e40 = Node("Boardwalk")


# Link the Nodes together
board.headval.nextval = e2
e2.nextval = e3
e3.nextval = e4
e4.nextval = e5
e5.nextval = e6
e6.nextval = e7
e7.nextval = e8
e8.nextval = e9
e9.nextval = e10
e10.nextval = e11
e11.nextval = e12
e12.nextval = e13
e13.nextval = e14
e14.nextval = e15
e15.nextval = e16
e16.nextval = e17
e17.nextval = e18
e18.nextval = e19
e19.nextval = e20
e20.nextval = e21
e21.nextval = e22
e22.nextval = e23
e23.nextval = e24
e24.nextval = e25
e25.nextval = e26
e26.nextval = e27
e27.nextval = e28
e28.nextval = e29
e29.nextval = e30
e30.nextval = e31
e31.nextval = e32
e32.nextval = e34
e34.nextval = e35
e35.nextval = e36
e36.nextval = e37
e37.nextval = e38
e38.nextval = e39
e39.nextval = e40
e40.nextval = board.headval

position = board.headval

position = turn(position)

print(position.dataval)

position = turn(position)

print(position.dataval)






# YOUR CODE GOES HERE
import random

#There are 24 squares a player can land on, including the start square
#to simulate this I'll create a circularly linked list that the player traverses, each node is a square

chanceCards = ["OutJail", "CollectMoney", "CollectMoney", "CollectMoney", "Railroad", "Utility"
, "Go", "StCharles", "Illinois", "Boardwalk", "ReadingRailroad", "ThreeBack"
, "PayMoney", "PayMoney", "PayMoney", "GoToJail"]

#probability of requested sqares is measured using this dictionary

probability = {
    "ReadingRailroad": 0,
    "PenRailroad": 0,
    "B&ORailroad": 0,
    "ShortLine": 0,
    "Go": 0,
    "Mediterenean": 0,
    "Boardwalk": 0,

}

class Node:
    def __init__(self, dataval=None):
        self.dataval = dataval
        self.nextval = None
        self.type = None

class SLinkedList:
    def __init__(self):
        self.headval = None

    def listprint(self):
        printval = self.headval
        while printval is not None:
            print (printval.dataval)
            printval = printval.nextval

def chanceCard(position):

    #randomly select one of the 16 cards
    selection = random.randint(0,15)

    #print selection
    card = chanceCards[selection]
    print("Chance card pulled:")
    print(card)

    if card == "Railroad":
        while position.type != "Railroad":
            position = position.nextval

    elif card == "Utility":
        while position.type != "Utility":
            position = position.nextval

    elif card == "Go":
        position = goTo(position,"Go")

    elif card == "StCharles":
        position = goTo(position,"StCharles")

    elif card == "Illinois":
        position = goTo(position,"Illinois")

    elif card == "Boardwalk":
        position = goTo(position,"Boardwalk")

    elif card == "ReadingRailroad":
        position = goTo(position,"ReadingRailroad")

    elif card == "GoToJail":
        position = goTo(position,"Jail")

    elif card == "ThreeBack":
        for i in range(0,37):
            position = position.nextval

    return position



def goTo(position, location):
    while position.dataval is not location:
        position = position.nextval

    return position

def turn(position):
    movement = roll_dice()
    print(movement)
    for i in range(0,movement[0]):
        position = position.nextval

    if position.dataval == "Chance":
        position = chanceCard(position)


    if movement[1]:
        movement = roll_dice()
        print(movement)
        for i in range(0,movement[0]):
            position = position.nextval


    if position.dataval == "Chance":
        position = chanceCard(position)

    if movement[1]:
        movement = roll_dice()
        print(movement)
        for i in range(0,movement[0]):
            position = position.nextval

    if movement[1]:
        position = goTo(position,"Jail")
        print("go to jail")

    return position #final position at end of turn

def roll_dice():
    print("Rolling dice...")
    dice1 = random.randint(1,6) #randomly select a value between 1 and 6
    dice2 = random.randint(1,6)
    doubles = False

    total = dice1 + dice2

    print(dice1)
    print(dice2)

    #if the dice have the same value, reroll but keep track of the total
    if dice1 == dice2:
        doubles = True

    return total, doubles;

board = SLinkedList()
board.headval = Node("Go")
e2 = Node("Mediteranian")
e3 = Node("ComChest")
e4 = Node("Baltic")
e5 = Node("IncomeTax")
e6 = Node("ReadingRailroad")
e6.type = "Railroad"
e7 = Node("Oriental")
e8 = Node("Chance")
e8.type = "Chance"
e9 = Node("Vermont")
e10 = Node("Conneticut")
e11 = Node("Jail")
e12 = Node("StCharles")
e13 = Node("Electric")
e13.type = "Utility"
e14 = Node("States")
e15 = Node("Virginia")
e16 = Node("PenRailroad")
e16.type = "Railroad"
e17 = Node("StJames")
e18 = Node("ComChest")
e19 = Node("Tennesse")
e20 = Node("NewYork")
e21 = Node("FreeParking")
e22 = Node("Kentucky")
e23 = Node("Chance")
e23.type = "Chance"
e24 = Node("Indiana")
e25 = Node("Illinois")
e26 = Node("B&ORailroad")
e26.type = "Railroad"
e27 = Node("Atlantic")
e28 = Node("Ventor")
e29 = Node("WaterWorks")
e29.type = "Utility"
e30 = Node("Marvin")
e31 = Node("GoToJail")
e32 = Node("Pacific")
e33 = Node("NCarolina")
e34 = Node("ComChest")
e35 = Node("Pensilvania")
e36 = Node("ShortLineRailroad")
e36.type = "Railroad"
e37 = Node("Chance")
e37.type = "Chance"
e38 = Node("ParkPlace")
e39 = Node("LuxTax")
e40 = Node("Boardwalk")


# Link the Nodes together
board.headval.nextval = e2
e2.nextval = e3
e3.nextval = e4
e4.nextval = e5
e5.nextval = e6
e6.nextval = e7
e7.nextval = e8
e8.nextval = e9
e9.nextval = e10
e10.nextval = e11
e11.nextval = e12
e12.nextval = e13
e13.nextval = e14
e14.nextval = e15
e15.nextval = e16
e16.nextval = e17
e17.nextval = e18
e18.nextval = e19
e19.nextval = e20
e20.nextval = e21
e21.nextval = e22
e22.nextval = e23
e23.nextval = e24
e24.nextval = e25
e25.nextval = e26
e26.nextval = e27
e27.nextval = e28
e28.nextval = e29
e29.nextval = e30
e30.nextval = e31
e31.nextval = e32
e32.nextval = e34
e34.nextval = e35
e35.nextval = e36
e36.nextval = e37
e37.nextval = e38
e38.nextval = e39
e39.nextval = e40
e40.nextval = board.headval

position = board.headval

position = turn(position)

print(position.dataval)

position = turn(position)

print(position.dataval)














# YOUR CODE GOES HERE
# YOUR CODE GOES HERE
import random
from ipythonblocks import BlockGrid
import math

#There are 24 squares a player can land on, including the start square
#to simulate this I'll create a circularly linked list that the player traverses, each node is a square

chanceCards = ["OutJail", "CollectMoney", "CollectMoney", "CollectMoney", "Railroad", "Utility"
, "Go", "StCharles", "Illinois", "Boardwalk", "ReadingRailroad", "ThreeBack"
, "PayMoney", "PayMoney", "PayMoney", "GoToJail"]

#probability of requested sqares is measured using this dictionary

probability = {
    "ReadingRailroad": 0,
    "PenRailroad": 0,
    "B&ORailroad": 0,
    "ShortLineRailroad": 0,
    "Go": 0,
    "Mediteranian": 0,
    "Boardwalk": 0,

}

probabilityAverages = {
    "ReadingRailroad": 0,
    "PenRailroad": 0,
    "B&ORailroad": 0,
    "ShortLineRailroad": 0,
    "Go": 0,
    "Mediteranian": 0,
    "Boardwalk": 0,

}

def probabilities(position):

    if position in probability:
        probability[position] += 1

class Node:
    def __init__(self, dataval=None):
        self.dataval = dataval
        self.nextval = None
        self.type = None

class SLinkedList:
    def __init__(self):
        self.headval = None

    def listprint(self):
        printval = self.headval
        while printval is not None:
            print (printval.dataval)
            printval = printval.nextval

def chanceCard(position):

    #randomly select one of the 16 cards
    selection = random.randint(0,15)

    #print selection
    card = chanceCards[selection]
    #print("Chance card pulled:")
    #print(card)

    if card == "Railroad":
        while position.type != "Railroad":
            position = position.nextval

    elif card == "Utility":
        while position.type != "Utility":
            position = position.nextval

    elif card == "Go":
        position = goTo(position,"Go")

    elif card == "StCharles":
        position = goTo(position,"StCharles")

    elif card == "Illinois":
        position = goTo(position,"Illinois")

    elif card == "Boardwalk":
        position = goTo(position,"Boardwalk")

    elif card == "Mediteranian":
        position = goTo(position,"Mediteranian")

    elif card == "ReadingRailroad":
        position = goTo(position,"ReadingRailroad")

    elif card == "GoToJail":
        position = goTo(position,"Jail")

    elif card == "ThreeBack":
        for i in range(0,37):
            position = position.nextval

    return position



def goTo(position, location):
    while position.dataval is not location:
        position = position.nextval

    return position

def turn(position):
    movement = roll_dice()
    #print(movement)
    for i in range(0,movement[0]):
        position = position.nextval

    probabilities(position.dataval)
    if position.dataval == "Chance":
        position = chanceCard(position)
        probabilities(position.dataval)


    if movement[1]:
        movement = roll_dice()
        #print(movement)
        for i in range(0,movement[0]):
            position = position.nextval
        probabilities(position.dataval)

    if position.dataval == "Chance":
        position = chanceCard(position)


    if movement[1]:
        movement = roll_dice()
        #print(movement)
        for i in range(0,movement[0]):
            position = position.nextval
        probabilities(position.dataval)

    if movement[1]:
        position = goTo(position,"Jail")
        probabilities(position.dataval)
        #print("go to jail")

    return position #final position at end of turn

def roll_dice():
    #print("Rolling dice...")
    dice1 = random.randint(1,6) #randomly select a value between 1 and 6
    dice2 = random.randint(1,6)
    doubles = False

    total = dice1 + dice2

    #print(dice1)
    #print(dice2)

    #if the dice have the same value, reroll but keep track of the total
    if dice1 == dice2:
        doubles = True

    return total, doubles;

board = SLinkedList()
board.headval = Node("Go")
e2 = Node("Mediteranian")
e3 = Node("ComChest")
e4 = Node("Baltic")
e5 = Node("IncomeTax")
e6 = Node("ReadingRailroad")
e6.type = "Railroad"
e7 = Node("Oriental")
e8 = Node("Chance")
e8.type = "Chance"
e9 = Node("Vermont")
e10 = Node("Conneticut")
e11 = Node("Jail")
e12 = Node("StCharles")
e13 = Node("Electric")
e13.type = "Utility"
e14 = Node("States")
e15 = Node("Virginia")
e16 = Node("PenRailroad")
e16.type = "Railroad"
e17 = Node("StJames")
e18 = Node("ComChest")
e19 = Node("Tennesse")
e20 = Node("NewYork")
e21 = Node("FreeParking")
e22 = Node("Kentucky")
e23 = Node("Chance")
e23.type = "Chance"
e24 = Node("Indiana")
e25 = Node("Illinois")
e26 = Node("B&ORailroad")
e26.type = "Railroad"
e27 = Node("Atlantic")
e28 = Node("Ventor")
e29 = Node("WaterWorks")
e29.type = "Utility"
e30 = Node("Marvin")
e31 = Node("GoToJail")
e32 = Node("Pacific")
e33 = Node("NCarolina")
e34 = Node("ComChest")
e35 = Node("Pensilvania")
e36 = Node("ShortLineRailroad")
e36.type = "Railroad"
e37 = Node("Chance")
e37.type = "Chance"
e38 = Node("ParkPlace")
e39 = Node("LuxTax")
e40 = Node("Boardwalk")


# Link the Nodes together
board.headval.nextval = e2
e2.nextval = e3
e3.nextval = e4
e4.nextval = e5
e5.nextval = e6
e6.nextval = e7
e7.nextval = e8
e8.nextval = e9
e9.nextval = e10
e10.nextval = e11
e11.nextval = e12
e12.nextval = e13
e13.nextval = e14
e14.nextval = e15
e15.nextval = e16
e16.nextval = e17
e17.nextval = e18
e18.nextval = e19
e19.nextval = e20
e20.nextval = e21
e21.nextval = e22
e22.nextval = e23
e23.nextval = e24
e24.nextval = e25
e25.nextval = e26
e26.nextval = e27
e27.nextval = e28
e28.nextval = e29
e29.nextval = e30
e30.nextval = e31
e31.nextval = e32
e32.nextval = e34
e34.nextval = e35
e35.nextval = e36
e36.nextval = e37
e37.nextval = e38
e38.nextval = e39
e39.nextval = e40
e40.nextval = board.headval

position = board.headval

for x in range(1,1000):
    for i in range(0,100):
        position = turn(position)

for x, y in probability.items():
    print(x, y/(100000))


grid = BlockGrid(10, 10, fill=(123, 234, 123))
grid
